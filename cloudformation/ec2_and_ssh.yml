AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 and SSH showcase: https://github.com/widdix/aws-ec2-ssh'
Parameters:
  VPC:
    Description: The VPC the EC2 instance is launched into.
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The subnet the EC2 instance is launched into.
    Type: AWS::EC2::Subnet::Id
Mappings:
  RegionMap:
    eu-west-1:
      AMI: ami-31328842
    ap-southeast-1:
      AMI: ami-e90dc68a
    ap-southeast-2:
      AMI: ami-f2210191
    eu-central-1:
      AMI: ami-e2df388d
    ap-northeast-2:
      AMI: ami-6598510b
    ap-northeast-1:
      AMI: ami-f80e0596
    us-east-1:
      AMI: ami-08111162
    sa-east-1:
      AMI: ami-1e159872
    us-west-1:
      AMI: ami-1b0f7d7b
    us-west-2:
      AMI: ami-c229c0a2
Resources:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ssh
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'Role'
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: iam
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:ListUsers
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - iam:ListSSHPublicKeys
                  - iam:GetSSHPublicKey
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:user/*'
  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            /opt/authorized_keys_command.sh:
              content: |
                #!/bin/bash -e
                if [ -z "$1" ]; then
                  exit 1
                fi
                aws iam list-ssh-public-keys --user-name "$1" --query "SSHPublicKeys[?Status == 'Active'].[SSHPublicKeyId]" --output text | while read KeyId; do
                  aws iam get-ssh-public-key --user-name "$1" --ssh-public-key-id "$KeyId" --encoding SSH --query "SSHPublicKey.SSHPublicKeyBody" --output text
                done
              mode: '000755'
              owner: root
              group: root
            /opt/import_users.sh:
              content: |
                #!/bin/bash
                aws iam list-users --query "Users[].[UserName]" --output text | while read User; do
                  if id -u "$User" >/dev/null 2>&1; then
                    echo "$User exists"
                  else
                    /usr/sbin/adduser "$User"
                    echo "$User ALL=(ALL) NOPASSWD:ALL" > "/etc/sudoers.d/$User"
                  fi
                done
              mode: '000755'
              owner: root
              group: root
            /etc/cron.d/import_users:
              content: |
                */10 * * * * root /opt/import_users.sh
              mode: '000644'
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
                runas=root
          commands:
            a_configure_sshd_command:
              command: sed -i 's:#AuthorizedKeysCommand none:AuthorizedKeysCommand
                /opt/authorized_keys_command.sh:g' /etc/ssh/sshd_config
            b_configure_sshd_commanduser:
              command: sed -i 's:#AuthorizedKeysCommandUser nobody:AuthorizedKeysCommandUser
                nobody:g' /etc/ssh/sshd_config
            c_import_users:
              command: ./import_users.sh
              cwd: /opt
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              sshd:
                enabled: 'true'
                ensureRunning: 'true'
                commands:
                  - a_configure_sshd_command
                  - b_configure_sshd_commanduser
    Properties:
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      IamInstanceProfile: !Ref 'InstanceProfile'
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref 'SecurityGroup'
      SubnetId: !Ref 'Subnet'
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
          /opt/aws/bin/cfn-signal --exit-code=$? --stack=${AWS::StackName} --region=${AWS::Region} --resource=Instance
      Tags:
        - Key: Name
          Value: ec2-ssh-showcase
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
Outputs:
  PublicName:
    Description: The public name of the EC2 instance.
    Value: !GetAtt 'Instance.PublicDnsName'
